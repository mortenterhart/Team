package test.utilities;

import base.City;
import base.Population;
import base.Tour;
import main.Application;
import org.junit.BeforeClass;
import org.junit.Test;
import utilities.MinimalTourDetector;

import java.util.List;

import static org.junit.Assert.assertEquals;

public class MinimalTourDetectorTest {
    private static Application application;
    private static List<City> availableCities;
    private static Population testPopulation;

    @BeforeClass
    public static void initializePopulation() {
        application = new Application();
        application.loadData();
        availableCities = application.getAvailableCities();

        int[] cityIdsTour1 = { 148, 121, 5, 157, 28, 152, 243, 101, 26, 96, 160, 76, 21, 42, 204, 71, 18, 88, 199, 107, 3, 69, 194, 155, 232, 263, 192, 142, 202, 180, 183, 147, 124, 84, 29, 24, 91, 211, 54, 95, 150, 51, 20, 112, 43, 231, 278, 245, 119, 111, 224, 49, 36, 70, 197, 14, 225, 44, 258, 25, 125, 190, 97, 89, 153, 209, 118, 131, 246, 264, 206, 214, 161, 57, 185, 19, 103, 259, 17, 227, 68, 132, 174, 55, 144, 220, 223, 4, 236, 212, 154, 104, 11, 135, 102, 234, 30, 48, 213, 269, 106, 50, 27, 247, 59, 31, 274, 39, 276, 116, 32, 146, 58, 45, 279, 108, 120, 280, 61, 127, 200, 267, 46, 163, 251, 105, 201, 37, 145, 60, 35, 182, 250, 228, 166, 149, 226, 77, 176, 233, 86, 265, 219, 38, 184, 7, 177, 187, 256, 92, 203, 12, 65, 266, 252, 237, 217, 159, 141, 189, 15, 93, 22, 191, 117, 253, 1, 173, 172, 128, 257, 241, 136, 62, 85, 216, 129, 205, 114, 273, 33, 109, 133, 277, 275, 268, 222, 240, 181, 170, 143, 122, 98, 156, 260, 168, 139, 13, 137, 6, 235, 248, 242, 52, 23, 79, 164, 87, 198, 16, 221, 162, 195, 208, 179, 178, 72, 56, 63, 8, 64, 94, 171, 53, 151, 261, 196, 9, 34, 138, 2, 167, 75, 254, 134, 47, 244, 83, 67, 10, 207, 186, 210, 130, 110, 99, 126, 271, 255, 66, 41, 175, 140, 272, 188, 249, 215, 81, 165, 169, 239, 193, 78, 123, 262, 82, 158, 238, 73, 229, 80, 90, 74, 115, 40, 100, 218, 230, 270, 113 };
        int[] cityIdsTour2 = { 163, 115, 41, 113, 89, 173, 181, 73, 125, 62, 170, 230, 132, 277, 21, 259, 195, 208, 12, 129, 120, 158, 166, 264, 269, 49, 228, 38, 67, 131, 104, 63, 14, 152, 103, 24, 161, 189, 174, 242, 267, 175, 243, 130, 81, 109, 88, 194, 241, 102, 279, 232, 54, 137, 110, 260, 266, 105, 106, 197, 249, 193, 237, 92, 25, 239, 93, 275, 31, 231, 164, 29, 111, 58, 47, 227, 138, 207, 52, 240, 26, 212, 145, 107, 209, 159, 144, 185, 168, 211, 213, 122, 148, 262, 182, 167, 46, 94, 217, 40, 30, 19, 254, 200, 169, 214, 15, 265, 34, 10, 256, 127, 224, 80, 255, 123, 1, 74, 257, 276, 50, 206, 5, 39, 124, 42, 177, 203, 99, 244, 180, 100, 48, 150, 157, 16, 155, 82, 17, 97, 280, 246, 20, 220, 268, 199, 27, 65, 201, 76, 53, 258, 247, 79, 278, 44, 223, 114, 118, 225, 3, 263, 126, 251, 140, 43, 134, 210, 139, 250, 202, 36, 90, 153, 192, 176, 11, 205, 270, 147, 33, 186, 221, 22, 273, 135, 60, 9, 77, 248, 149, 216, 235, 156, 204, 245, 154, 68, 18, 236, 215, 71, 55, 226, 56, 238, 86, 98, 198, 96, 183, 162, 218, 4, 179, 178, 72, 6, 66, 8, 64, 143, 117, 253, 151, 261, 196, 35, 234, 32, 91, 75, 61, 37, 229, 84, 45, 141, 23, 219, 136, 142, 190, 172, 184, 233, 28, 121, 271, 2, 95, 83, 101, 160, 87, 7, 272, 78, 85, 51, 133, 128, 116, 274, 171, 187, 188, 13, 165, 70, 59, 146, 108, 252, 119, 191, 57, 112, 69, 222 };
        int[] cityIdsTour3 = { 111, 124, 161, 238, 135, 57, 165, 232, 48, 178, 231, 2, 75, 222, 269, 217, 19, 156, 150, 235, 183, 110, 280, 114, 221, 80, 194, 77, 9, 123, 4, 230, 138, 14, 21, 69, 184, 30, 18, 211, 188, 27, 115, 55, 82, 267, 127, 169, 213, 141, 162, 176, 170, 96, 13, 145, 237, 99, 276, 163, 208, 177, 103, 108, 160, 186, 173, 15, 219, 85, 229, 128, 151, 113, 263, 93, 121, 100, 203, 47, 261, 139, 42, 240, 73, 182, 10, 95, 227, 60, 22, 5, 197, 88, 180, 24, 87, 278, 40, 245, 62, 112, 228, 98, 153, 216, 43, 117, 268, 195, 264, 28, 185, 90, 101, 236, 192, 215, 129, 23, 38, 146, 71, 199, 31, 204, 131, 140, 249, 187, 36, 52, 279, 106, 81, 144, 63, 226, 242, 212, 172, 255, 70, 253, 171, 39, 17, 11, 66, 234, 89, 243, 164, 179, 207, 247, 50, 64, 274, 92, 147, 61, 158, 29, 133, 209, 116, 271, 174, 210, 193, 248, 74, 134, 198, 126, 246, 157, 51, 181, 244, 257, 102, 35, 200, 272, 201, 37, 191, 225, 118, 273, 46, 206, 105, 166, 277, 214, 175, 1, 137, 122, 8, 266, 76, 25, 223, 58, 258, 83, 239, 44, 152, 107, 241, 189, 41, 12, 49, 72, 32, 275, 167, 59, 196, 224, 65, 79, 54, 68, 91, 252, 136, 67, 202, 259, 218, 190, 233, 143, 84, 16, 56, 168, 109, 265, 53, 250, 104, 132, 78, 154, 7, 220, 256, 155, 262, 254, 142, 149, 270, 120, 119, 159, 3, 34, 45, 6, 94, 97, 125, 26, 148, 251, 33, 260, 86, 20, 205, 130 };

        testPopulation = new Population();
        testPopulation.getTours().add(createTourByIds(cityIdsTour1));
        testPopulation.getTours().add(createTourByIds(cityIdsTour2));
        testPopulation.getTours().add(createTourByIds(cityIdsTour3));
    }

    private static Tour createTourByIds(int[] cityIds) {
        Tour newTour = new Tour();
        for (int cityId : cityIds) {
            newTour.addCity(availableCities.get(cityId - 1));
        }
        return newTour;
    }

    @Test
    public void testMinimalTourInPopulation() {
        assertEquals(testPopulation.getTours().get(1),
                MinimalTourDetector.minimalTourIn(testPopulation));
    }

    @Test
    public void testEqualityOfMinimalFitness() {
        assertEquals(testPopulation.getTours().get(1).getFitness(),
                MinimalTourDetector.minimalTourIn(testPopulation).getFitness(), 0.0);
    }
}
